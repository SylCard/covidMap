{"version":3,"sources":["components/AppHeader.tsx","components/MapChart.tsx","components/Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppHeader","className","memo","setTooltipContent","React","useState","data","setData","useEffect","fetch","then","response","json","fixedData","data-tip","projectionConfig","scale","geography","geographies","map","geo","key","rsmKey","onMouseEnter","num","properties","NAME","POP_EST","currentCountryData","slice","Math","round","onMouseLeave","style","default","fill","outline","hover","pressed","Map","content","setContent","App","Grid","container","direction","spacing","justify","alignItems","item","xs","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qQAaeA,MAXf,WACE,OACE,4BAAQC,UAAU,cAChB,6CACA,yD,gCCwFSC,kBArEE,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,kBAAiC,EAC3BC,IAAMC,SAA8B,IADT,mBAC5CC,EAD4C,KACtCC,EADsC,KAsBnD,OAnBAC,qBAAU,WACNC,MAAM,oDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAJ,GAIJ,IAAIO,EAAS,eACPP,EADO,CAEV,2BAA4BA,EAAI,GAChC,cAAeA,EAAK,yBAEfO,EAAS,UACTA,EAAU,gBACjBN,EAAQM,QAEb,IAIA,oCACE,kBAAC,gBAAD,CAAeC,WAAS,GAAGC,iBAAkB,CAAEC,MAAO,MACpD,kBAAC,gBAAD,KACE,kBAAC,cAAD,CAAaC,UA1CrB,2GA2CW,qBAAGC,YACUC,KAAI,SAAAC,GAAG,OACjB,kBAAC,YAAD,CACEC,IAAKD,EAAIE,OACTL,UAAWG,EACXG,aAAc,WAAO,IA9CtBC,EA8CqB,EACQJ,EAAIK,WAAtBC,EADU,EACVA,KADU,EACJC,QAEd,GAAIrB,EAAKoB,GAAO,CACd,IAAME,EAAqBtB,EAAKoB,GAAMG,OAAO,GAAG,GAChD1B,EAAkB,GAAD,OAAIuB,EAAJ,6EAnDtBF,EAoDiDI,EAAkB,UAAgBA,EAAkB,UAAgBA,EAAkB,QAnD5I,IACDE,KAAKC,MAAMP,EAAM,KAAa,GAAK,KACjCA,EAAM,IACRM,KAAKC,MAAMP,EAAM,KAAU,GAAK,IAEhCM,KAAKC,MAAMP,EAAM,KAAO,GAAK,QAkDtBQ,aAAc,WACZ7B,EAAkB,KAEpB8B,MAAO,CACLC,QAAS,CACPC,KAAM,UACNC,QAAS,QAEXC,MAAO,CACLF,KAAM,OACNC,QAAS,QAEXE,QAAS,CACPH,KAAM,OACNC,QAAS,uBC1EhB,SAASG,IAAO,IAAD,EACElC,mBAAS,IADX,mBACrBmC,EADqB,KACZC,EADY,KAE5B,OACE,6BACE,kBAAC,EAAD,CAAUtC,kBAAmBsC,IAC7B,kBAAC,IAAD,KAAeD,ICoBNE,MAzBf,WACE,OACE,yBAAKzC,UAAU,OACb,kBAAC0C,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAGC,QAAQ,SACxDC,WAAW,UACL,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAEjD,UAAU,UAA3B,aACc,uBAAGkD,KAAK,qCAAR,YAAwD,6BADtE,WACmF,uBAAGA,KAAK,yBAAR,kBAErF,kBAACR,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GACb,kBAAC,EAAD,OAEF,kBAACP,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,IAEd,kBAACP,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,IAEf,kBAACP,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GACd,kBAACX,EAAD,OAED,kBAACI,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,OCbFE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f37ce878.chunk.js","sourcesContent":["import React from 'react';\n\nfunction AppHeader() {\n  return (\n    <header className=\"App-header\">\n      <h1> COVID-19 Map</h1>\n      <p>\n        How is our planet doing?\n      </p>\n    </header>\n  );\n}\n\nexport default AppHeader;\n","import React, { useEffect, useState, memo } from 'react';\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = (num:number) => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\ntype MapProps = {\n  setTooltipContent: (message:string) => void\n};\n\nconst MapChart = ({ setTooltipContent }:MapProps) => {\n  const [data, setData] = React.useState<{[key: string]: []}>({});\n\n  useEffect(() => {\n      fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n      .then(response => response.json())\n      .then(data => {\n        // data[\"Argentina\"].forEach(({ date, confirmed, recovered, deaths }) =>\n        //   console.log(`${date} active cases: ${confirmed - recovered - deaths}`)\n        // );\n        let fixedData = {\n           ...data,\n           \"United States of America\": data[\"US\"],\n           \"South Korea\": data[\"Korea, South\"]\n         }\n         delete fixedData[\"US\"]\n         delete fixedData[\"Korea, South\"]\n         setData(fixedData);\n      });\n  },[]);\n\n\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }} >\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    const { NAME, POP_EST } = geo.properties;\n                    // most recent day info == last element in array\n                    if (data[NAME]) {\n                      const currentCountryData = data[NAME].slice(-1)[0];\n                      setTooltipContent(`${NAME} â€”\n                                          active cases: ${rounded(currentCountryData['confirmed'] - currentCountryData['recovered'] - currentCountryData['deaths'])}`);\n                    }\n\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#D6D6DA\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\n\nimport MapChart from \"./MapChart\";\n\nexport default function Map() {\n  const [content, setContent] = useState(\"\");\n  return (\n    <div>\n      <MapChart setTooltipContent={setContent} />\n      <ReactTooltip>{content}</ReactTooltip>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\n\nimport AppHeader from './components/AppHeader';\nimport Map from \"./components/Map\";\n\nfunction App(){\n  return (\n    <div className=\"App\">\n      <Grid container direction='row' spacing={5} justify=\"center\"\n  alignItems=\"center\">\n        <Grid item xs={2}className=\"footer\">\n            Data from <a href=\"https://github.com/pomber/covid19\">JHU CSSE</a><br/>Made by <a href='https://cardorelle.io'>cardorelle.io</a>\n        </Grid>\n      <Grid item xs={8}>\n        <AppHeader/>\n      </Grid>\n      <Grid item xs={2}>\n      </Grid>\n       <Grid item xs={2}>\n       </Grid>\n       <Grid item xs={8}>\n        <Map/>\n       </Grid>\n       <Grid item xs={2}>\n       </Grid>\n     </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}